<template>
  <div class="Literature" :style="{'-webkit-overflow-scrolling': scrollMode}">
    <!-- 轮播图 -->
    <mt-swipe :auto="3000">
      <mt-swipe-item v-for="item in banner" :key="item.id">
        <router-link class="swiperUrl" tag="div" :to="{path:'/literatureDetail',query:{id:item.id}}">
          <img :src="item.coverUrl" alt>
        </router-link>
      </mt-swipe-item>
    </mt-swipe>

    <div class="tip ac" v-show="!total">暂无数据</div>
    <!-- 加载更多 -->
    <mt-loadmore
      :top-method="loadTop"
      @top-status-change="handleTopChange"
      :bottom-method="loadBottom"
      :bottom-all-loaded="allLoaded"
      @bottom-status-change="handleBottomChange"
      :auto-fill="false"
      ref="loadmore"
    >
      <div slot="top" class="mint-loadmore-top fs-34">
        <span v-show="topStatus === 'pull'">下拉刷新最新数据</span>
        <span v-show="topStatus === 'loading'">--加载中请稍后--</span>
        <span v-show="topStatus === 'drop'">松开手指即可更新</span>
      </div>
      <!-- 引入文章列表组件 -->
      <myLiterature ref="myLiterature" :data="info"></myLiterature>
      <div slot="bottom" class="mint-loadmore-bottom fs-34">
        <span
          v-show="bottomStatus  === 'pull'"
          :class="{ 'rotate': bottomStatus  === 'drop' }"
        >继续往上拉</span>
        <span v-show="bottomStatus === 'loading'">刷新中，请稍等</span>
        <span v-show="bottomStatus === 'drop'">松手刷新</span>
      </div>
    </mt-loadmore>
  </div>
</template>
<script>
import myLiterature from "../components/myLiterature";
import { Toast } from "mint-ui";
export default {
  data() {
    return {
      allLoaded: false,
      bottomStatus: "",
      topStatus: "",
      params: {},
      pageNow: 1,
      pageNows: 1,
      pageSize: 10,
      info: [],
      banner: [],
      total: 0,
      scrollMode: "auto" //移动端弹性滚动效果，touch为弹性滚动，auto是非弹性滚动
    };
  },
  created() {
    this.getBanner();
    this.getArticle();
  },
  methods: {
    //获取轮播图
    getBanner() {
      let that = this;
      this.axios
        .get(`/u/article/banner`)
        .then(response => {
          //   console.log(response);
          if (response.data.code == 0) {
            that.banner = response.data.data;
          } else {
            alert(response.data.message);
          }
        })
        .catch(err => {
          console.log(err);
        });
    },
    loadTop() {
      // 刷新数据的操作
      var that = this;
      that.allLoaded = false;
      setTimeout(function() {
        that.pageNows = 1;
        that.pageSize = 10;
        that.getArticle();
        that.$refs.loadmore.onTopLoaded();
      }, 1000);
    },
    handleTopChange: function(status) {
      this.topStatus = status;
    },
    // 加载更多
    loadBottom() {
      var that = this;
      that.pageNows += 1;
      var pages = Math.ceil(that.total / 10);
      that.pageSize = 10 * that.pageNows;
      // 加载更多数据的操作
      setTimeout(function() {
        if (that.pageNows <= pages) {
          that.getArticle(); //再次发送请求拿到数据
        } else {
          that.allLoaded = true; // 若数据已全部获取完毕
          Toast({
            message: "已加载完所有数据",
            duration: 2000,
            position: "bottom"
          });
        }
        console.log(that.allLoaded);

        that.$refs.loadmore.onBottomLoaded();
      }, 1000);
    },
    handleBottomChange: function(status) {
      this.bottomStatus = status;
      // console.log(status);
    },
    //获取文章列表
    getArticle() {
      let that = this;
      let id = this.$store.getters.userInfo.userId;
      that.params = {
        pageNow: this.pageNow,
        pageSize: this.pageSize,
        userId: id
      };
      this.axios
        .get("/u/articleList", { params: that.params })
        .then(res => {
          console.log(res);
          if (res.data.code === 0) {
            that.info = res.data.data;
            console.log(that.info);
            that.total = res.data.total;
            var u = navigator.userAgent;
            var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
            if (isiOS == true) {
              that.scrollMode = "touch";
            }
          } else {
            alert(response.data.message);
          }
        })
        .catch(err => {
          console.log(err);
        });
    }
  },
  components: {
    myLiterature
  }
};
</script>
<style lang="scss" scoped>
@import "../assets/style/public";
.Literature {
  margin-top: $header_h;
  background-color: #fbf3d0;
  position: relative;
  .mint-swipe {
    height: 3.5rem;
    .mint-swipe-item {
      .swiperUrl {
        height: 3.5rem;
      }
      img {
        width: 100%;
        height: 100%;
      }
    }
  }
  .tip {
    color: #ccc;
    height: calc(#{$height} - #{$header_h} - 3.5rem);
  }
  .fs-34 {
    font-size: 0.34rem;
  }
}
</style>